name: Continuous Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  CRATES: ". jclass jdescriptor"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-
            cargo-

      - name: Run checks, build, and test
        shell: bash
        run: |
          for crate in $CRATES; do
            cargo check --manifest-path $crate/Cargo.toml --verbose
            cargo build --manifest-path $crate/Cargo.toml --verbose
            cargo test --manifest-path $crate/Cargo.toml --verbose
          done

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{secrets.CODECOV_TOKEN}}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: cobertura.xml

#      - name: Install Tarpaulin
#        shell: bash
#        run: cargo install cargo-tarpaulin
#
#      - name: Run coverage
#        shell: bash
#        run: |
#          for crate in $CRATES; do
#            cargo tarpaulin --manifest-path $crate/Cargo.toml --out Xml --output-dir $crate
#          done
#
#      - name: Upload coverage to Codecov
#        if: success()
#        uses: codecov/codecov-action@v5
#        with:
#          files: |
#            ./*.xml
#            jclass/*.xml
#            jdescriptor/*.xml
#          token: ${{ secrets.CODECOV_TOKEN }}
#          fail_ci_if_error: true

  test-on-s390x:
    name: build (linux big-endian)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/s390x-unknown-linux-gnu
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-
            cargo-

      - name: Install cross
        shell: bash
        run: cargo install cross

      - name: Run tests on s390x (Big Endian)
        shell: bash
        run: |
          for crate in $CRATES; do
            cross test --manifest-path $crate/Cargo.toml --target s390x-unknown-linux-gnu -- --test-threads=8
          done
